// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Control
#include <Control.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_Device
#include <Device.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_io_newgrounds_Call
#include <io/newgrounds/Call.h>
#endif
#ifndef INCLUDED_io_newgrounds_ICallable
#include <io/newgrounds/ICallable.h>
#endif
#ifndef INCLUDED_io_newgrounds_NG
#include <io/newgrounds/NG.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_components_Component
#include <io/newgrounds/components/Component.h>
#endif
#ifndef INCLUDED_io_newgrounds_components_ComponentList
#include <io/newgrounds/components/ComponentList.h>
#endif
#ifndef INCLUDED_io_newgrounds_components_EventComponent
#include <io/newgrounds/components/EventComponent.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b7c1b117f8362d86_15_new,"OptionsMenu","new",0x0f1d276f,"OptionsMenu.new","OptionsMenu.hx",15,0x7ae6dae1)
HX_LOCAL_STACK_FRAME(_hx_pos_b7c1b117f8362d86_25_create,"OptionsMenu","create",0x9c60a34d,"OptionsMenu.create","OptionsMenu.hx",25,0x7ae6dae1)
HX_LOCAL_STACK_FRAME(_hx_pos_b7c1b117f8362d86_54_update,"OptionsMenu","update",0xa756c25a,"OptionsMenu.update","OptionsMenu.hx",54,0x7ae6dae1)
HX_LOCAL_STACK_FRAME(_hx_pos_b7c1b117f8362d86_77_waitingInput,"OptionsMenu","waitingInput",0x8f595a4e,"OptionsMenu.waitingInput","OptionsMenu.hx",77,0x7ae6dae1)
HX_LOCAL_STACK_FRAME(_hx_pos_b7c1b117f8362d86_88_changeBinding,"OptionsMenu","changeBinding",0xc7868f84,"OptionsMenu.changeBinding","OptionsMenu.hx",88,0x7ae6dae1)
HX_LOCAL_STACK_FRAME(_hx_pos_b7c1b117f8362d86_95_changeSelection,"OptionsMenu","changeSelection",0x61ecca4b,"OptionsMenu.changeSelection","OptionsMenu.hx",95,0x7ae6dae1)

void OptionsMenu_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_b7c1b117f8362d86_15_new)
HXLINE(  84)		this->isSettingControl = false;
HXLINE(  20)		this->controlsStrings = ::Array_obj< ::String >::__new(0);
HXLINE(  18)		this->curSelected = 0;
HXLINE(  15)		super::__construct(TransIn,TransOut);
            	}

Dynamic OptionsMenu_obj::__CreateEmpty() { return new OptionsMenu_obj; }

void *OptionsMenu_obj::_hx_vtable = 0;

Dynamic OptionsMenu_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OptionsMenu_obj > _hx_result = new OptionsMenu_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool OptionsMenu_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x109e893d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x109e893d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void OptionsMenu_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_b7c1b117f8362d86_25_create)
HXLINE(  26)		 ::flixel::FlxSprite menuBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->loadGraphic(HX_("assets/images/menuDesat.png",d6,52,53,17),null(),null(),null(),null(),null());
HXLINE(  27)		this->controlsStrings = ::CoolUtil_obj::coolTextFile(HX_("assets/data/controls.txt",f1,5a,85,68));
HXLINE(  28)		menuBG->set_color(-1412611);
HXLINE(  29)		menuBG->setGraphicSize(::Std_obj::_hx_int((menuBG->get_width() * ((Float)1.1))),null());
HXLINE(  30)		menuBG->updateHitbox();
HXLINE(  31)		menuBG->screenCenter(null());
HXLINE(  32)		menuBG->set_antialiasing(true);
HXLINE(  33)		this->add(menuBG);
HXLINE(  35)		this->grpControls =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  36)		this->add(this->grpControls);
HXLINE(  38)		{
HXLINE(  38)			int _g = 0;
HXDLIN(  38)			int _g1 = this->controlsStrings->length;
HXDLIN(  38)			while((_g < _g1)){
HXLINE(  38)				_g = (_g + 1);
HXDLIN(  38)				int i = (_g - 1);
HXLINE(  40)				if ((this->controlsStrings->__get(i).indexOf(HX_("set",a2,9b,57,00),null()) != -1)) {
HXLINE(  42)					::String controlLabel = (this->controlsStrings->__get(i).substring(3,null()) + HX_(": ",a6,32,00,00));
HXDLIN(  42)					 ::Alphabet controlLabel1 =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),(controlLabel + this->controlsStrings->__get((i + 1))),true,false);
HXLINE(  43)					controlLabel1->isMenuItem = true;
HXLINE(  44)					controlLabel1->targetY = ( (Float)(i) );
HXLINE(  45)					this->grpControls->add(controlLabel1).StaticCast<  ::Alphabet >();
            				}
            			}
            		}
HXLINE(  50)		this->super::create();
            	}


void OptionsMenu_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_b7c1b117f8362d86_54_update)
HXLINE(  55)		this->super::update(elapsed);
HXLINE(  57)		if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE(  59)			this->changeBinding();
            		}
HXLINE(  62)		if (this->isSettingControl) {
HXLINE(  63)			this->waitingInput();
            		}
            		else {
HXLINE(  66)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE(  67)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  67)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  67)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(  68)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE(  69)				this->changeSelection(-1);
            			}
HXLINE(  70)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE(  71)				this->changeSelection(1);
            			}
            		}
            	}


void OptionsMenu_obj::waitingInput(){
            	HX_STACKFRAME(&_hx_pos_b7c1b117f8362d86_77_waitingInput)
HXDLIN(  77)		if ((::flixel::FlxG_obj::keys->getIsDown()->length > 0)) {
HXLINE(  79)			 ::Controls _hx_tmp = ::PlayerSettings_obj::player1->controls;
HXDLIN(  79)			_hx_tmp->replaceBinding(::Control_obj::LEFT_dyn(),::Device_obj::Keys_dyn(),::flixel::FlxG_obj::keys->getIsDown()->__get(0).StaticCast<  ::flixel::input::FlxInput >()->ID,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsMenu_obj,waitingInput,(void))

void OptionsMenu_obj::changeBinding(){
            	HX_STACKFRAME(&_hx_pos_b7c1b117f8362d86_88_changeBinding)
HXDLIN(  88)		if (!(this->isSettingControl)) {
HXLINE(  90)			this->isSettingControl = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsMenu_obj,changeBinding,(void))

void OptionsMenu_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_b7c1b117f8362d86_95_changeSelection)
HXLINE(  97)		{
HXLINE(  97)			::io::newgrounds::NG_obj::core->calls->event->logEvent(HX_("Fresh",4e,f6,b3,99))->send();
HXDLIN(  97)			::haxe::Log_obj::trace((HX_("should have logged: ",b3,75,8c,3a) + HX_("Fresh",4e,f6,b3,99)),::hx::SourceInfo(HX_("source/NGio.hx",4b,1f,9f,05),187,HX_("NGio",5f,e0,c4,33),HX_("logEvent",f6,04,cb,60)));
            		}
HXLINE( 100)		::flixel::FlxG_obj::sound->play((HX_("assets/sounds/scrollMenu",2b,4b,80,92) + ::TitleState_obj::soundExt),((Float)0.4),null(),null(),null(),null());
HXLINE( 102)		 ::OptionsMenu _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 102)		_hx_tmp->curSelected = (_hx_tmp->curSelected + change);
HXLINE( 104)		if ((this->curSelected < 0)) {
HXLINE( 105)			this->curSelected = (this->grpControls->length - 1);
            		}
HXLINE( 106)		if ((this->curSelected >= this->grpControls->length)) {
HXLINE( 107)			this->curSelected = 0;
            		}
HXLINE( 111)		int bullShit = 0;
HXLINE( 113)		{
HXLINE( 113)			int _g = 0;
HXDLIN( 113)			::Array< ::Dynamic> _g1 = this->grpControls->members;
HXDLIN( 113)			while((_g < _g1->length)){
HXLINE( 113)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 113)				_g = (_g + 1);
HXLINE( 115)				item->targetY = ( (Float)((bullShit - this->curSelected)) );
HXLINE( 116)				bullShit = (bullShit + 1);
HXLINE( 118)				item->set_alpha(((Float)0.6));
HXLINE( 121)				if ((item->targetY == 0)) {
HXLINE( 123)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsMenu_obj,changeSelection,(void))


::hx::ObjectPtr< OptionsMenu_obj > OptionsMenu_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< OptionsMenu_obj > __this = new OptionsMenu_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< OptionsMenu_obj > OptionsMenu_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	OptionsMenu_obj *__this = (OptionsMenu_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OptionsMenu_obj), true, "OptionsMenu"));
	*(void **)__this = OptionsMenu_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

OptionsMenu_obj::OptionsMenu_obj()
{
}

void OptionsMenu_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OptionsMenu);
	HX_MARK_MEMBER_NAME(selector,"selector");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(controlsStrings,"controlsStrings");
	HX_MARK_MEMBER_NAME(grpControls,"grpControls");
	HX_MARK_MEMBER_NAME(isSettingControl,"isSettingControl");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OptionsMenu_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(selector,"selector");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(controlsStrings,"controlsStrings");
	HX_VISIT_MEMBER_NAME(grpControls,"grpControls");
	HX_VISIT_MEMBER_NAME(isSettingControl,"isSettingControl");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val OptionsMenu_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { return ::hx::Val( selector ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"grpControls") ) { return ::hx::Val( grpControls ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"waitingInput") ) { return ::hx::Val( waitingInput_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"changeBinding") ) { return ::hx::Val( changeBinding_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"controlsStrings") ) { return ::hx::Val( controlsStrings ); }
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"isSettingControl") ) { return ::hx::Val( isSettingControl ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val OptionsMenu_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { selector=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpControls") ) { grpControls=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"controlsStrings") ) { controlsStrings=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"isSettingControl") ) { isSettingControl=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OptionsMenu_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("selector",1f,33,6d,b1));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("controlsStrings",ac,8a,05,03));
	outFields->push(HX_("grpControls",7b,bb,b2,d5));
	outFields->push(HX_("isSettingControl",37,39,d8,de));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OptionsMenu_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OptionsMenu_obj,selector),HX_("selector",1f,33,6d,b1)},
	{::hx::fsInt,(int)offsetof(OptionsMenu_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(OptionsMenu_obj,controlsStrings),HX_("controlsStrings",ac,8a,05,03)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(OptionsMenu_obj,grpControls),HX_("grpControls",7b,bb,b2,d5)},
	{::hx::fsBool,(int)offsetof(OptionsMenu_obj,isSettingControl),HX_("isSettingControl",37,39,d8,de)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *OptionsMenu_obj_sStaticStorageInfo = 0;
#endif

static ::String OptionsMenu_obj_sMemberFields[] = {
	HX_("selector",1f,33,6d,b1),
	HX_("curSelected",fb,eb,ab,32),
	HX_("controlsStrings",ac,8a,05,03),
	HX_("grpControls",7b,bb,b2,d5),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("waitingInput",3d,8b,28,ac),
	HX_("isSettingControl",37,39,d8,de),
	HX_("changeBinding",b5,2f,02,e0),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

::hx::Class OptionsMenu_obj::__mClass;

void OptionsMenu_obj::__register()
{
	OptionsMenu_obj _hx_dummy;
	OptionsMenu_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("OptionsMenu",fd,43,a3,5d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OptionsMenu_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OptionsMenu_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OptionsMenu_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OptionsMenu_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

